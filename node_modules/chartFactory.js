

makeHumanReadable = function(input)
{
	var number;
	var unit = "";
	var count = 0;

	if (typeof(input) == 'string') { number = parseInt(input); }
	else if (typeof(input) == 'number') { number = input; }
	else { return ""; }

	while (number > 1000)
	{
		number = number / 1024;
		count++;
	}

	if (count == 1) { unit = "k";}
	else if (count == 2) { unit = "m"; }
	else if (count == 3) { unit = "g"; }
	else if (count == 4) { unit = "t"; }

	return Math.round((number)*100)/100 + unit;
}

percentView = function(input)
{
	return Math.round(input*10000)/100;
}

threeView = function(input)
{
	return Math.round(input*1000)/1000;
}

chartPoint = function(row)
{
	this.load1 = row.load1;
	this.load2 = row.load2;
	this.load3 = row.load3;
	this.freemem = row.freemem;
	this.created = row.created;
}

chartHolder = function()
{
	this.width = 800;
	this.height = 400;
	this.points = [];
	this.ipaddr = "";
	this.hostname = "";
	this.platform = "";
	this.totalmem = 0;

	this.addRow = function(row)
	{
		this.ipaddr = row.ipaddr;
		this.hostname = row.hostname;
		this.totalmem = row.totalmem;
		this.platform = row.platform;
		this.points.push(new chartPoint(row));
	}

	this.toString = function()
	{
		var i;
		var output = "<h1>" + this.hostname + "</h1>\n"
			+ this.ipaddr + ",  " + this.platform + ", "
			+ makeHumanReadable(this.totalmem) + "<br/>\n";

		output += this.canvasString();
/*
		output += "<table>\n";
		for (i = 0; i < this.points.length; i++)
		{
			output += "<tr><td>"
				+ percentView(this.points[i].load1) + "</td><td>"
				+ percentView(this.points[i].load2) + "</td><td>"
				+ percentView(this.points[i].load3) + "</td><td>"
				+ makeHumanReadable(this.points[i].freemem) + "</td><td>"
				+ this.points[i].created + "</td></tr>\n";
		}
		output += "</table>\n";
*/
		return output;
	}

	this.scalePercent = function(x,y)
	{
		var min, max;
		var i;
		if (this.max_x == undefined)
		{
			this.max_x = new Date(this.points[0].created).getTime();
			this.min_x = new Date(this.points[0].created).getTime();

			for (i = 0; i < this.points.length; i++)
			{
				this.points[i].intdate = new Date(this.points[i].created).getTime();
				if (this.max_x < this.points[i].intdate)
				{
					this.max_x = this.points[i].intdate;
				}
				if (this.min_x > this.points[i].intdate)
				{
					this.min_x = this.points[i].intdate;
				}
			}
		}

		return { x: threeView((new Date(x).getTime() - this.min_x) * this.width / (this.max_x - this.min_x)), y: threeView((1-y) * this.height)};
	}

	this.canvasString = function()
	{
		var output = "";
		var i = 0;
		var load1array = [];
		var load2array = [];
		var load3array = [];

		for (i = 0; i < this.points.length; i++)
		{
			load1array.push(this.scalePercent(this.points[i].created, this.points[i].load1));
			load2array.push(this.scalePercent(this.points[i].created, this.points[i].load2));
			load3array.push(this.scalePercent(this.points[i].created, this.points[i].load3));
		}

		output += "<canvas id='" + this.hostname + "Chart' width=" + this.width + " height=" + this.height + "></canvas>\n";
		output += "<script type='text/javascript'>\n" 
			+ "drawLine('" + this.hostname + "Chart', " + JSON.stringify(load1array) + ");\n"
			+ "drawLine('" + this.hostname + "Chart', " + JSON.stringify(load2array) + ");\n"
			+ "drawLine('" + this.hostname + "Chart', " + JSON.stringify(load3array) + ");\n"
			+ "</script>\n";
		return output;
	}
}

readRows = function(rows)
{
	if (rows == undefined) { return 0; }
	var current_name = rows.length > 0 ? rows[0].hostname : "";
	var current_holder = new chartHolder();
	var holders = {};
	var output = "";
	var i;

	for (i = 0; i < rows.length; i++)
	{
		if (rows[i].hostname != current_name)
		{
			holders[current_name] = current_holder;
			current_holder = new chartHolder();
			current_name = rows[i].hostname;
		}

		current_holder.addRow(rows[i]);
	}
	holders[current_name] = current_holder;

	for (var key in holders)
	{
		output += holders[key].toString();
	}

	return output;
}


module.exports.readRows = readRows;
